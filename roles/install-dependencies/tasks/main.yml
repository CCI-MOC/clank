# tasks file for atmosphere-install-dependencies

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "defaults.yml"
  tags: vars

- name: install initial packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state={{ INITIAL_PACKAGES.state }} update_cache=yes
  with_items: INITIAL_PACKAGES.packages
  tags: install, apt-install

# Add apt repositories

- name: add node repository
  apt_repository: repo='ppa:chris-lea/node.js'
  when: ansible_distribution  == "Ubuntu"
  tags: apt-install

- name: add redis repository
  apt_repository: repo='ppa:chris-lea/redis-server'
  when: ansible_distribution  == "Ubuntu"
  tags: apt-install

- name: update cache as a separate step
  apt: update_cache=yes
  when: ansible_distribution  == "Ubuntu"
  tags: apt-install

- name: install dev packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state={{ DEV_PACKAGES.state }}
  with_items: DEV_PACKAGES.packages
  tags: install, apt-install

- name: install lib packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state={{ LIB_PACKAGES.state }}
  with_items: LIB_PACKAGES.packages
  tags: install, apt-install

- name: install nginx packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state={{ NGINX_PACKAGES.state }}
  with_items: NGINX_PACKAGES.packages
  tags: install, apt-install

- name: run modprobe for the first time 
  modprobe: name={{ item.name }} state=present params={{ item.params }} 
  with_items: MODPROBE_PACKAGES.packages

- name: make sure there is an exit 0 at end of /etc/rc.local
  lineinfile: dest=/etc/rc.local insertbefore=EOR line="exit 0"

- name: add modprobe nbd for imaging to /etc/rc.local for subsequent rebooks
  lineinfile: dest=/etc/rc.local insertbefore="exit 0" line="modprope {{ item.name }} {{ item.params | default(omit) }}" 
  with_items: MODPROBE_PACKAGES.packages

- name: pip install python packages
  pip: name={{ item }}
  with_items:
    - virtualenv
    - wheel
    - setuptools
