###########################
## This is a 'mod_macro' configuration. NONE of the information inside the
#macro should be changed to enable Atmosphere on apache. Simply scroll to the
#bottom of the page and add the one line corresponding to your specific
#hostname and atmosphere/troposphere path
#
# If you do not have 'mod_macro' installed for apache:
# apt-get install libapache2-mod-macro
##

<Macro Atmosphere $MYHOSTNAMEHERE $PATH_TO_ATMOSPHERE $PATH_TO_TROPOSPHERE $BASECERTHERE $KEYHERE $BUNDLECERTHERE>
    ### KEEP THIS LINE HERE!
    ### Avoids the Proxy 502 Errors
    ### REF:
    ### http://serverfault.com/questions/185894/proxy-error-502-reason-error-reading-from-remote-server-with-apache-2-2-3-de
    SetEnv proxy-initial-not-pooled 1
    SetEnv proxy-nokeepalive 0

    ###
    ## Uncomment these lines to enable '/server-status'
    ## This can be useful for debugging Apache + MOD_WSGI
    ###
    # ProxyPass /server-status !
    # <Location /server-status>
    #     SetHandler server-status
    #     AuthType CAS
    #     AuthName "CAS"
    #     CASScope /
    #     require valid-user
    #     Order allow,deny
    #     Allow from 127.0.0.1
    #     Satisfy any
    # </Location>
    # ExtendedStatus On

    ###############################################################################
    ## HTTP Virtual Host Context (Forwards requests to HTTPS @ MYHOSTNAMEHERE)
    ###############################################################################
    <VirtualHost *:80>
        ErrorLog ${APACHE_LOG_DIR}/error.log
        LogLevel warn
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        Alias /init_files /opt/dev/atmosphere/init_files

        RewriteEngine On
        RewriteCond %{HTTPS} !=on
        RewriteCond %{REQUEST_URI} !^/init_files
        RewriteRule ^/?(.*) https://$MYHOSTNAMEHERE/$1 [R,L]

        <Location />
            Require all granted
        </Location>
    </VirtualHost>

    ###############################################################################
    ## SSL Configuration
    ###############################################################################
    SSLCryptoDevice builtin

    ###############################################################################
    ## Atmosphere Server Virtualhost (Port 443)
    ###############################################################################
    <VirtualHost *:443>
        # Rewrite
        RewriteEngine On
        RewriteCond %{HTTP:Authorization} ^(.*)
        RewriteRule .* - [e=HTTP_AUTHORIZATION:%1]

        # SSL Settings
        SSLEngine on
        SSLProtocol all -SSLv2
        SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW
        SSLCertificateFile $BASECERTHERE
        SSLCertificateKeyFile $KEYHERE
        SSLCertificateChainFile $BUNDLECERTHERE

        <Files ~ "\.(cgi|shtml|phtml|php3?)$">
            SSLOptions +StdEnvVars
        </Files>
        <Directory "/var/www/cgi-bin">
            SSLOptions +StdEnvVars
        </Directory>

        SetEnvIf User-Agent ".*MSIE.*" \
                 nokeepalive ssl-unclean-shutdown \
                 downgrade-1.0 force-response-1.0
        <Location />
            Require all granted
        </Location>
        ###############################################################################
        ## Celery-Flower proxy redirection
        ###############################################################################
        ProxyRequests Off
        ProxyPreserveHost On
        SSLProxyEngine On
        AllowEncodedSlashes NoDecode

        ProxyPass         /flower  https://$MYHOSTNAMEHERE:8443
        ProxyPassReverse  /flower  https://$MYHOSTNAMEHERE:8443
        ProxyPassReverse  /flower  https://$MYHOSTNAMEHERE/flower

        <Proxy https://$MYHOSTNAMEHERE:8443/flower*>
            Require all granted
        </Proxy>

        ###############################################################################
        ## Jenkins proxy redirection
        ###############################################################################
        <Proxy /jenkins*>
          Require all granted
        </Proxy>

        ProxyPass         /jenkins  http://localhost:8080/jenkins nocanon
        ProxyPassReverse  /jenkins  http://localhost:8080/jenkins
        ProxyPassReverse  /jenkins  https://$MYHOSTNAMEHERE/jenkins
        RequestHeader set X-Forwarded-Proto "https"
        RequestHeader set X-Forwarded-Port "443"

        ###############################################################################
        ## Atmosphere Server VirtualHost (Port 443)
        ###############################################################################


        SetEnv DJANGO_SETTINGS_MODULE atmosphere.settings

        # Logging
        ErrorLog /var/log/apache2/ssl_error.log
        TransferLog /var/log/apache2/ssl_access.log
        LogLevel warn

        # Catch static file paths
        # favicon and robots are better served outside of WSGI
        Alias /favicon.ico $PATH_TO_ATMOSPHERE/static/images/favicon.ico
        Alias /robots.txt $PATH_TO_ATMOSPHERE/templates/robots.txt
        #Assing WSGI to any other folder
	    WSGIDaemonProcess atmosphere_api processes=8 threads=7 inactivity-timeout=120 display-name=%{GROUP}
	    WSGIProcessGroup atmosphere_api
        WSGIScriptAlias / $PATH_TO_ATMOSPHERE/atmosphere/wsgi.py
        # Shell
        <Location /shell>
            AuthType CAS
            AuthName "CAS"
            require valid-user
            CASScope /
            Require all granted
        </Location>

        #static, init_files, && resources will auto-direct to the file
        Alias /init_files $PATH_TO_ATMOSPHERE/init_files
        Alias /resources $PATH_TO_ATMOSPHERE/resources
        Alias /static $PATH_TO_ATMOSPHERE/static

        # The following URLs are proxied to Troposphere:
        # /, /static, /applicaiton, /login, /logout, /cas/service
        Alias /assets $PATH_TO_TROPOSPHERE/troposphere/assets
        ProxyPass /application http://localhost:5000/application
        ProxyPassReverse /application http://localhost:5000/application
        ProxyPass /login http://localhost:5000/login
        ProxyPassReverse /login http://localhost:5000/login
        ProxyPass /logout http://localhost:5000/logout
        ProxyPassReverse /logout http://localhost:5000/logout
        ProxyPass /cas/oauth2.0 http://localhost:5000/cas/oauth2.0
        ProxyPassReverse /cas/oauth2.0 http://localhost:5000/cas/oauth2.0
        ProxyPass /cas/service http://localhost:5000/cas/service
        ProxyPassReverse /cas/service http://localhost:5000/cas/service
        ProxyPass /forbidden http://localhost:5000/forbidden
        ProxyPassReverse /forbidden http://localhost:5000/forbidden
        ProxyPass /version http://localhost:5000/version
        ProxyPassReverse /version http://localhost:5000/version
        ProxyPass /maintenance http://localhost:5000/maintenance
        ProxyPassReverse /maintenance http://localhost:5000/maintenance
        ProxyPass /tropo-admin http://localhost:5000/tropo-admin
        ProxyPassReverse /tropo-admin http://localhost:5000/tropo-admin
        ProxyPass /tropo-api http://localhost:5000/tropo-api
        ProxyPassReverse /tropo-api http://localhost:5000/tropo-api
        ProxyPass /atmo_maintenance http://localhost:5000/atmo_maintenance
        ProxyPassReverse /atmo_maintenance http://localhost:5000/atmo_maintenance

        ProxyPassMatch ^/emulate http://localhost:5000
        ProxyPassReverse /emulate http://localhost:5000
        ProxyPassMatch ^/$ http://localhost:5000
        ProxyPassReverse / http://localhost:5000

    </VirtualHost>

    ###############################################################################
    ## Troposphere Server Virtualhost (Port 5000)
    ###############################################################################
    Listen 5000
    <VirtualHost *:5000>
        <Location />
            Require all granted
        </Location>
        SetEnv DJANGO_SETTINGS_MODULE troposphere.settings
	    WSGIDaemonProcess troposphere processes=4 threads=7 inactivity-timeout=60 display-name=%{GROUP}
	    WSGIProcessGroup troposphere
        WSGIScriptAlias / $PATH_TO_TROPOSPHERE/troposphere/wsgi.py
        WSGIPassAuthorization On

        # Logging
        ErrorLog /var/log/apache2/ssl_error.log
        TransferLog /var/log/apache2/ssl_access.log
        LogLevel warn

        <Directory $PATH_TO_TROPOSPHERE/trosposphere>
            <Files wsgi.py>
            </Files>
        </Directory>
    </VirtualHost>
</Macro>
##Add your line below, it should look something like this:
##Use Atmosphere vm.iplantc[ollaborative].org /opt/dev/atmosphere /opt/dev/troposphere [name_of_ssl_cert.crt] [name_of_ssl_key.key] [name_of_ssl_bundle.crt]
Use Atmosphere {{ SERVER_URL }} {{ ATMOSPHERE_LOCATION }} {{ TROPOSPHERE_LOCATION }} {{ SSL_LOCATION }}/certs/{{ SSL_CERTIFICATE }} {{ SSL_LOCATION }}/private/{{ SSL_KEY }} {{ SSL_LOCATION }}/certs/{{ BUNDLE_CERT }}
