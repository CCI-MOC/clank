- name: pip install requirements
  pip: requirements={{ ATMOSPHERE_LOCATION }}/requirements.txt virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: pip install dev requirements when jenkins variable set
  pip: requirements={{ ATMOSPHERE_LOCATION }}/dev_requirements.txt virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}
  when: JENKINS

- name: wheel install requirements
  command: "{{ VIRTUAL_ENV_ATMOSPHERE }}/bin/wheel install-scripts celery"

- name: insert ansible role path into config file
  lineinfile: dest={{ ANSIBLE_DEPLOY_LOCATION }}/ansible/ansible.cfg regexp="roles_path =" line="roles_path = {{ ANSIBLE_DEPLOY_LOCATION }}/atmosphere_ansible_bioci/ansible/roles"
  tags:
    - ansible-deploy

- name: move over precompleted variables.ini
  copy: src=atmosphere_variables.ini dest={{ ATMOSPHERE_LOCATION }}/variables.ini

- name: run generate scripts for atmosphere
  shell: "{{ VIRTUAL_ENV_ATMOSPHERE }}/bin/python {{ ATMOSPHERE_LOCATION }}/scripts/generate_configs.py"

- name: make ssh file directory
  command: mkdir -p {{ ATMOSPHERE_LOCATION }}/extras/ssh/

- name: move over id_rsa private key
  copy: src=id_rsa dest={{ ATMOSPHERE_LOCATION }}/extras/ssh/

- name: move over id_rsa public key
  copy: src=id_rsa.pub dest={{ ATMOSPHERE_LOCATION }}/extras/ssh/

- name: add IdentityFile line to system's ssh config
  lineinfile: dest=/root/.ssh/config state=present create=yes line='IdentityFile {{ ATMOSPHERE_LOCATION }}/atmosphere/extras/ssh/id_rsa' insertbefore=BOF

- name: add IdentityFile line to system's ssh config
  lineinfile: dest=/root/.ssh/config state=present create=yes line='IdentityFile /root/.ssh/id_rsa' insertbefore=BOF

- name: create atmosphere log directory
  command: mkdir -p {{ ATMOSPHERE_LOCATION }}/logs

#### DB migrations
- name: run syncdb
  django_manage: >
      command=syncdb
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: run migrate
  django_manage: >
      command=migrate
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: load provider fixtures
  django_manage: >
      command=loaddata
      app_path={{ ATMOSPHERE_LOCATION }}
      fixtures={{ ATMOSPHERE_LOCATION }}/core/fixtures/provider.json
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: load quota fixtures
  django_manage: >
      command=loaddata
      app_path={{ ATMOSPHERE_LOCATION }}
      fixtures={{ ATMOSPHERE_LOCATION }}/core/fixtures/quota.json
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: created atmosphere cache requests table
  django_manage: >
      command=createcachetable
      cache_table="atmosphere_cache_requests"
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: collectstatic
  django_manage: >
      command=collectstatic
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: touch atmosphere.log
  command: touch {{ ATMOSPHERE_LOCATION }}/logs/atmosphere.log

- name: touch atmosphere_status.log
  command: touch {{ ATMOSPHERE_LOCATION }}/logs/atmosphere_status.log

- name: add webserver user for user and group permissions
  file: path={{ ATMOSPHERE_LOCATION }} owner={{ WEBSERVER_USER }} group={{ WEBSERVER_USER }} recurse=yes
